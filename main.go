package main

import (
	"fmt"
	"github.com/stellarisJAY/nesgo/cpu"
	"github.com/stellarisJAY/nesgo/ppu"
	"github.com/veandco/go-sdl2/sdl"
	"io"
	"log"
	"os"
	"time"
	"unsafe"
)

// test_program1 死循环，不断切换(0,0)像素点的颜色
var test_program1 = []byte{
	cpu.LDX_IM, 0x1, cpu.STX_ABS, 0x00, 0x02,
	cpu.LDX_IM, 0x0, cpu.STX_ABS, 0x00, 0x02,
	cpu.JMP_A, 0x0, 0x06,
}

// test_program2, 白色像素点，从(0,0)移动到(15,0)
var test_program2 = []byte{
	cpu.LDA_IM, 0x1, cpu.LDX_IM, 0x0,
	cpu.STA_ABS, 0x0, 0x02,
	cpu.STX_ABS, 0x0, 0x02, cpu.STA_ABS, 0x1, 0x2,
	cpu.STX_ABS, 0x1, 0x02, cpu.STA_ABS, 0x2, 0x2,
	cpu.STX_ABS, 0x2, 0x02, cpu.STA_ABS, 0x3, 0x2,
	cpu.STX_ABS, 0x3, 0x02, cpu.STA_ABS, 0x4, 0x2,
	cpu.STX_ABS, 0x4, 0x02, cpu.STA_ABS, 0x5, 0x2,
	cpu.STX_ABS, 0x5, 0x02, cpu.STA_ABS, 0x6, 0x2,
	cpu.STX_ABS, 0x6, 0x02, cpu.STA_ABS, 0x7, 0x2,
	cpu.STX_ABS, 0x7, 0x02, cpu.STA_ABS, 0x8, 0x2,
	cpu.STX_ABS, 0x8, 0x02, cpu.STA_ABS, 0x9, 0x2,
	cpu.STX_ABS, 0x9, 0x02, cpu.STA_ABS, 0xa, 0x2,
	cpu.STX_ABS, 0xa, 0x02, cpu.STA_ABS, 0xb, 0x2,
	cpu.STX_ABS, 0xb, 0x02, cpu.STA_ABS, 0xc, 0x2,
	cpu.STX_ABS, 0xc, 0x02, cpu.STA_ABS, 0xd, 0x2,
	cpu.STX_ABS, 0xd, 0x02, cpu.STA_ABS, 0xe, 0x2,
	cpu.STX_ABS, 0xe, 0x02, cpu.STA_ABS, 0xf, 0x2,
	cpu.STX_ABS, 0xf, 0x02, cpu.JMP_A, 0x4, 0x6,
}

var snake_game = []byte{
	0x20, 0x06, 0x06, 0x20, 0x38, 0x06, 0x20, 0x0d, 0x06, 0x20, 0x2a, 0x06, 0x60, 0xa9, 0x02, 0x85,
	0x02, 0xa9, 0x04, 0x85, 0x03, 0xa9, 0x11, 0x85, 0x10, 0xa9, 0x10, 0x85, 0x12, 0xa9, 0x0f, 0x85,
	0x14, 0xa9, 0x04, 0x85, 0x11, 0x85, 0x13, 0x85, 0x15, 0x60, 0xa5, 0xfe, 0x85, 0x00, 0xa5, 0xfe,
	0x29, 0x03, 0x18, 0x69, 0x02, 0x85, 0x01, 0x60, 0x20, 0x4d, 0x06, 0x20, 0x8d, 0x06, 0x20, 0xc3,
	0x06, 0x20, 0x19, 0x07, 0x20, 0x20, 0x07, 0x20, 0x2d, 0x07, 0x4c, 0x38, 0x06, 0xa5, 0xff, 0xc9,
	0x77, 0xf0, 0x0d, 0xc9, 0x64, 0xf0, 0x14, 0xc9, 0x73, 0xf0, 0x1b, 0xc9, 0x61, 0xf0, 0x22, 0x60,
	0xa9, 0x04, 0x24, 0x02, 0xd0, 0x26, 0xa9, 0x01, 0x85, 0x02, 0x60, 0xa9, 0x08, 0x24, 0x02, 0xd0,
	0x1b, 0xa9, 0x02, 0x85, 0x02, 0x60, 0xa9, 0x01, 0x24, 0x02, 0xd0, 0x10, 0xa9, 0x04, 0x85, 0x02,
	0x60, 0xa9, 0x02, 0x24, 0x02, 0xd0, 0x05, 0xa9, 0x08, 0x85, 0x02, 0x60, 0x60, 0x20, 0x94, 0x06,
	0x20, 0xa8, 0x06, 0x60, 0xa5, 0x00, 0xc5, 0x10, 0xd0, 0x0d, 0xa5, 0x01, 0xc5, 0x11, 0xd0, 0x07,
	0xe6, 0x03, 0xe6, 0x03, 0x20, 0x2a, 0x06, 0x60, 0xa2, 0x02, 0xb5, 0x10, 0xc5, 0x10, 0xd0, 0x06,
	0xb5, 0x11, 0xc5, 0x11, 0xf0, 0x09, 0xe8, 0xe8, 0xe4, 0x03, 0xf0, 0x06, 0x4c, 0xaa, 0x06, 0x4c,
	0x35, 0x07, 0x60, 0xa6, 0x03, 0xca, 0x8a, 0xb5, 0x10, 0x95, 0x12, 0xca, 0x10, 0xf9, 0xa5, 0x02,
	0x4a, 0xb0, 0x09, 0x4a, 0xb0, 0x19, 0x4a, 0xb0, 0x1f, 0x4a, 0xb0, 0x2f, 0xa5, 0x10, 0x38, 0xe9,
	0x20, 0x85, 0x10, 0x90, 0x01, 0x60, 0xc6, 0x11, 0xa9, 0x01, 0xc5, 0x11, 0xf0, 0x28, 0x60, 0xe6,
	0x10, 0xa9, 0x1f, 0x24, 0x10, 0xf0, 0x1f, 0x60, 0xa5, 0x10, 0x18, 0x69, 0x20, 0x85, 0x10, 0xb0,
	0x01, 0x60, 0xe6, 0x11, 0xa9, 0x06, 0xc5, 0x11, 0xf0, 0x0c, 0x60, 0xc6, 0x10, 0xa5, 0x10, 0x29,
	0x1f, 0xc9, 0x1f, 0xf0, 0x01, 0x60, 0x4c, 0x35, 0x07, 0xa0, 0x00, 0xa5, 0xfe, 0x91, 0x00, 0x60,
	0xa6, 0x03, 0xa9, 0x00, 0x81, 0x10, 0xa2, 0x00, 0xa9, 0x01, 0x81, 0x10, 0x60, 0xa2, 0x00, 0xea,
	0xea, 0xca, 0xd0, 0xfb, 0x60,
}

var frame = make([]byte, 32*32*3) // 记录屏幕32x32个像素的RGBA颜色
var window *sdl.Window
var renderer *sdl.Renderer

const RenderInterval = 20000 * time.Nanosecond

// initSDL 初始化window和renderer
func initSDL() error {
	if err := sdl.Init(sdl.INIT_EVERYTHING); err != nil {
		return fmt.Errorf("init sdl error %w", err)
	}
	w, err := sdl.CreateWindow("nesgo", sdl.WINDOWPOS_CENTERED, sdl.WINDOWPOS_CENTERED, 32*20, 32*20, sdl.WINDOW_SHOWN)
	if err != nil {
		return fmt.Errorf("sdl create window error %w", err)
	}
	window = w
	r, err := sdl.CreateRenderer(window, 0, sdl.RENDERER_ACCELERATED)
	if err != nil {
		return fmt.Errorf("sdl get renderer error %w", err)
	}
	_ = r.SetScale(20, 20)
	renderer = r
	return nil
}

func parseArgsAndReadProgramFile(args []string) ([]byte, error) {
	if len(args) < 2 {
		return nil, fmt.Errorf("no input game file")
	}
	file, err := os.Open(args[1])
	if err != nil {
		return nil, fmt.Errorf("can't open game file %w", err)
	}
	program, err := io.ReadAll(file)
	if err != nil {
		return nil, fmt.Errorf("read game file error %w", err)
	}
	log.Printf("loaded program: %s, size: %d", args[1], len(program))
	return program, nil
}

func main() {
	args := os.Args
	var program []byte
	if p, err := parseArgsAndReadProgramFile(args); err != nil {
		panic(err)
	} else {
		program = p
	}
	processor := cpu.NewProcessor()
	if err := initSDL(); err != nil {
		panic(err)
	}
	// 用texture表示整个32x32屏幕
	texture, _ := renderer.CreateTexture(sdl.PIXELFORMAT_RGB24, sdl.TEXTUREACCESS_STREAMING, 32, 32)
	defer texture.Destroy()
	defer window.Destroy()

	// 运行program，callback进行屏幕渲染
	processor.LoadAndRunWithCallback(program, handleEvents, func(p *cpu.Processor) bool {
		// 从内存读取屏幕数据，如果发生更新就刷新屏幕像素
		updated := ppu.ReadAndUpdateScreen(p.GetMemoryRange(cpu.OutputBaseAddr, cpu.OutputEndAddr), frame)
		if updated {
			_ = texture.Update(nil, unsafe.Pointer(&frame[0]), 32*3)
			_ = renderer.Copy(texture, nil, nil)
			renderer.Present()
		}
		time.Sleep(RenderInterval)
		return true
	})
}

func handleEvents(p *cpu.Processor) bool {
	for e := sdl.PollEvent(); e != nil; e = sdl.PollEvent() {
		switch e.(type) {
		case *sdl.QuitEvent:
			return false
		case *sdl.KeyboardEvent:
			p.HandleKeyboardEvent(e.(*sdl.KeyboardEvent))
		default:
		}
	}
	return true
}
