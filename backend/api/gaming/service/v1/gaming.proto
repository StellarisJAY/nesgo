syntax = "proto3";

package gaming.v1;

import "google/api/annotations.proto";

option go_package = "github.com/stellarisJAY/nesgo/backend/api/gaming/service/v1;v1";

service Gaming {
  rpc CreateGameInstance(CreateGameInstanceRequest) returns (CreateGameInstanceResponse) {}
  rpc OpenGameConnection(OpenGameConnectionRequest) returns (OpenGameConnectionResponse) {}
  rpc SDPAnswer(SDPAnswerRequest) returns (SDPAnswerResponse) {}
  rpc ICECandidate(ICECandidateRequest) returns (ICECandidateResponse) {}

  rpc PauseEmulator(PauseEmulatorRequest) returns (PauseEmulatorResponse) {}
  rpc RestartEmulator(RestartEmulatorRequest) returns (RestartEmulatorResponse) {}

  rpc DeleteGameInstance(DeleteGameInstanceRequest) returns (DeleteGameInstanceResponse) {}

  rpc UploadGame(UploadGameRequest) returns (UploadGameResponse) {}
  rpc ListGames(ListGamesRequest) returns (ListGamesResponse) {}
  rpc DeleteGameFile(DeleteGameFileRequest) returns (DeleteGameFileResponse) {}

  rpc SetController(SetControllerRequest) returns (SetControllerResponse) {}
  rpc GetControllers(GetControllersRequest) returns (GetControllersResponse) {}
}

message CreateGameInstanceRequest {
  int64 roomId = 1;
  string game = 2;
}

message CreateGameInstanceResponse {
  int64 roomId = 1;
  int64 leaseId = 2;
}

message OpenGameConnectionRequest {
  int64 roomId = 1;
  int64 userId = 2;
}

message OpenGameConnectionResponse {
  int64 roomId = 1;
  int64 userId = 2;
  string sdpOffer = 3;
}

message SDPAnswerRequest {
  int64 roomId = 1;
  int64 userId = 2;
  string sdpAnswer = 3;
}

message SDPAnswerResponse {
  int64 roomId = 1;
  int64 userId = 2;
}

message ICECandidateRequest {
  int64 roomId = 1;
  int64 userId = 2;
  string candidate = 3;
}

message ICECandidateResponse {
  int64 roomId = 1;
  int64 userId = 2;
}

message PauseEmulatorRequest {
  int64 roomId = 1;
  int64 userId = 2;
}

message PauseEmulatorResponse {
  int64 roomId = 1;
  int64 userId = 2;
}

message RestartEmulatorRequest {
  int64 roomId = 1;
  int64 userId = 2;
  string game = 3;
}

message RestartEmulatorResponse {
  int64 roomId = 1;
  int64 userId = 2;
}

message UploadGameRequest {
  string name = 1;
  bytes data = 2;
}

message UploadGameResponse {

}

message ListGamesRequest {

}

message GameFileMetadata {
  string name = 1;
  string mapper = 2;
  string mirroring = 3;
}

message ListGamesResponse {
  repeated GameFileMetadata games = 1;
}

message DeleteGameFileRequest {
  repeated string games = 1;
}

message DeleteGameFileResponse {
  int32 deleted = 1;
}

message DeleteGameInstanceRequest {
  int64 roomId = 1;
  bool force = 2;
}

message DeleteGameInstanceResponse {
  int64 roomId = 1;
}

message SetControllerRequest {
  int64 roomId = 1;
  int64 userId = 2;
  int32 controller = 3;
}

message SetControllerResponse {}

message GetControllersRequest {
  int64 roomId = 1;
}
message GetControllersResponse {
  int64 roomId = 1;
  int64 controller1 = 2;
  int64 controller2 = 3;
}