// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             v3.12.4
// source: app/webapi/v1/nesgo.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationWebApiAddICECandidate = "/nesgo.webapi.v1.WebApi/AddICECandidate"
const OperationWebApiCreateRoom = "/nesgo.webapi.v1.WebApi/CreateRoom"
const OperationWebApiCreateUserKeyboardBinding = "/nesgo.webapi.v1.WebApi/CreateUserKeyboardBinding"
const OperationWebApiDeleteMember = "/nesgo.webapi.v1.WebApi/DeleteMember"
const OperationWebApiDeleteRoom = "/nesgo.webapi.v1.WebApi/DeleteRoom"
const OperationWebApiDeleteSave = "/nesgo.webapi.v1.WebApi/DeleteSave"
const OperationWebApiDeleteUserKeyboardBinding = "/nesgo.webapi.v1.WebApi/DeleteUserKeyboardBinding"
const OperationWebApiGetGraphicOptions = "/nesgo.webapi.v1.WebApi/GetGraphicOptions"
const OperationWebApiGetRoom = "/nesgo.webapi.v1.WebApi/GetRoom"
const OperationWebApiGetRoomMember = "/nesgo.webapi.v1.WebApi/GetRoomMember"
const OperationWebApiGetServerICECandidate = "/nesgo.webapi.v1.WebApi/GetServerICECandidate"
const OperationWebApiGetUser = "/nesgo.webapi.v1.WebApi/GetUser"
const OperationWebApiGetUserKeyboardBinding = "/nesgo.webapi.v1.WebApi/GetUserKeyboardBinding"
const OperationWebApiJoinRoom = "/nesgo.webapi.v1.WebApi/JoinRoom"
const OperationWebApiListAllRooms = "/nesgo.webapi.v1.WebApi/ListAllRooms"
const OperationWebApiListGames = "/nesgo.webapi.v1.WebApi/ListGames"
const OperationWebApiListMembers = "/nesgo.webapi.v1.WebApi/ListMembers"
const OperationWebApiListMyRooms = "/nesgo.webapi.v1.WebApi/ListMyRooms"
const OperationWebApiListSaves = "/nesgo.webapi.v1.WebApi/ListSaves"
const OperationWebApiListUserKeyboardBinding = "/nesgo.webapi.v1.WebApi/ListUserKeyboardBinding"
const OperationWebApiLoadSave = "/nesgo.webapi.v1.WebApi/LoadSave"
const OperationWebApiLogin = "/nesgo.webapi.v1.WebApi/Login"
const OperationWebApiOpenGameConnection = "/nesgo.webapi.v1.WebApi/OpenGameConnection"
const OperationWebApiRegister = "/nesgo.webapi.v1.WebApi/Register"
const OperationWebApiRestartEmulator = "/nesgo.webapi.v1.WebApi/RestartEmulator"
const OperationWebApiSDPAnswer = "/nesgo.webapi.v1.WebApi/SDPAnswer"
const OperationWebApiSaveGame = "/nesgo.webapi.v1.WebApi/SaveGame"
const OperationWebApiSetController = "/nesgo.webapi.v1.WebApi/SetController"
const OperationWebApiSetGraphicOptions = "/nesgo.webapi.v1.WebApi/SetGraphicOptions"
const OperationWebApiUpdateMemberRole = "/nesgo.webapi.v1.WebApi/UpdateMemberRole"
const OperationWebApiUpdateRoom = "/nesgo.webapi.v1.WebApi/UpdateRoom"
const OperationWebApiUpdateUserKeyboardBinding = "/nesgo.webapi.v1.WebApi/UpdateUserKeyboardBinding"

type WebApiHTTPServer interface {
	AddICECandidate(context.Context, *AddICECandidateRequest) (*AddICECandidateResponse, error)
	CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomResponse, error)
	CreateUserKeyboardBinding(context.Context, *CreateUserKeyboardBindingRequest) (*CreateUserKeyboardBindingResponse, error)
	DeleteMember(context.Context, *DeleteMemberRequest) (*DeleteMemberResponse, error)
	DeleteRoom(context.Context, *DeleteRoomRequest) (*DeleteRoomResponse, error)
	DeleteSave(context.Context, *DeleteSaveRequest) (*DeleteSaveResponse, error)
	DeleteUserKeyboardBinding(context.Context, *DeleteUserKeyboardBindingRequest) (*DeleteUserKeyboardBindingResponse, error)
	GetGraphicOptions(context.Context, *GetGraphicOptionsRequest) (*GetGraphicOptionsResponse, error)
	GetRoom(context.Context, *GetRoomRequest) (*GetRoomResponse, error)
	GetRoomMember(context.Context, *GetRoomMemberRequest) (*GetRoomMemberResponse, error)
	GetServerICECandidate(context.Context, *GetServerICECandidateRequest) (*GetServerICECandidateResponse, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	GetUserKeyboardBinding(context.Context, *GetUserKeyboardBindingRequest) (*GetUserKeyboardBindingResponse, error)
	JoinRoom(context.Context, *JoinRoomRequest) (*JoinRoomResponse, error)
	ListAllRooms(context.Context, *ListRoomRequest) (*ListRoomResponse, error)
	ListGames(context.Context, *ListGamesRequest) (*ListGamesResponse, error)
	ListMembers(context.Context, *ListMemberRequest) (*ListMemberResponse, error)
	ListMyRooms(context.Context, *ListRoomRequest) (*ListRoomResponse, error)
	ListSaves(context.Context, *ListSavesRequest) (*ListSavesResponse, error)
	ListUserKeyboardBinding(context.Context, *ListUserKeyboardBindingRequest) (*ListUserKeyboardBindingResponse, error)
	LoadSave(context.Context, *LoadSaveRequest) (*LoadSaveResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	OpenGameConnection(context.Context, *OpenGameConnectionRequest) (*OpenGameConnectionResponse, error)
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	RestartEmulator(context.Context, *RestartEmulatorRequest) (*RestartEmulatorResponse, error)
	SDPAnswer(context.Context, *SDPAnswerRequest) (*SDPAnswerResponse, error)
	SaveGame(context.Context, *SaveGameRequest) (*SaveGameResponse, error)
	SetController(context.Context, *SetControllerRequest) (*SetControllerResponse, error)
	SetGraphicOptions(context.Context, *SetGraphicOptionsRequest) (*SetGraphicOptionsResponse, error)
	UpdateMemberRole(context.Context, *UpdateMemberRoleRequest) (*UpdateMemberRoleResponse, error)
	UpdateRoom(context.Context, *UpdateRoomRequest) (*UpdateRoomResponse, error)
	UpdateUserKeyboardBinding(context.Context, *UpdateUserKeyboardBindingRequest) (*UpdateUserKeyboardBindingResponse, error)
}

func RegisterWebApiHTTPServer(s *http.Server, srv WebApiHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/register", _WebApi_Register0_HTTP_Handler(srv))
	r.POST("/api/v1/login", _WebApi_Login1_HTTP_Handler(srv))
	r.GET("/api/v1/rooms/joined", _WebApi_ListMyRooms0_HTTP_Handler(srv))
	r.GET("/api/v1/rooms", _WebApi_ListAllRooms0_HTTP_Handler(srv))
	r.POST("/api/v1/room", _WebApi_CreateRoom0_HTTP_Handler(srv))
	r.GET("/api/v1/room/{id}", _WebApi_GetRoom0_HTTP_Handler(srv))
	r.GET("/api/v1/user/{id}", _WebApi_GetUser0_HTTP_Handler(srv))
	r.POST("/api/v1/game/connection", _WebApi_OpenGameConnection0_HTTP_Handler(srv))
	r.POST("/api/v1/game/sdp", _WebApi_SDPAnswer0_HTTP_Handler(srv))
	r.POST("/api/v1/game/ice", _WebApi_AddICECandidate0_HTTP_Handler(srv))
	r.GET("/api/v1/members", _WebApi_ListMembers0_HTTP_Handler(srv))
	r.POST("/api/v1/room/{roomId}/join", _WebApi_JoinRoom0_HTTP_Handler(srv))
	r.DELETE("/api/v1/room/{roomId}", _WebApi_DeleteRoom0_HTTP_Handler(srv))
	r.PUT("/api/v1/room/{roomId}", _WebApi_UpdateRoom0_HTTP_Handler(srv))
	r.GET("/api/v1/member/{roomId}", _WebApi_GetRoomMember0_HTTP_Handler(srv))
	r.GET("/api/v1/games", _WebApi_ListGames1_HTTP_Handler(srv))
	r.POST("/api/v1/game/controller", _WebApi_SetController0_HTTP_Handler(srv))
	r.PUT("/api/v1/member/role", _WebApi_UpdateMemberRole0_HTTP_Handler(srv))
	r.DELETE("/api/v1/member", _WebApi_DeleteMember0_HTTP_Handler(srv))
	r.POST("/api/v1/game/save", _WebApi_SaveGame0_HTTP_Handler(srv))
	r.POST("/api/v1/game/load", _WebApi_LoadSave0_HTTP_Handler(srv))
	r.GET("/api/v1/game/saves", _WebApi_ListSaves0_HTTP_Handler(srv))
	r.POST("/api/v1/game/restart", _WebApi_RestartEmulator0_HTTP_Handler(srv))
	r.DELETE("/api/v1/game/save", _WebApi_DeleteSave0_HTTP_Handler(srv))
	r.POST("/api/v1/keyboard/binding", _WebApi_CreateUserKeyboardBinding0_HTTP_Handler(srv))
	r.GET("/api/v1/keyboard/bindings", _WebApi_ListUserKeyboardBinding0_HTTP_Handler(srv))
	r.GET("/api/v1/keyboard/binding/{id}", _WebApi_GetUserKeyboardBinding0_HTTP_Handler(srv))
	r.PUT("/api/v1/keyboard/binding", _WebApi_UpdateUserKeyboardBinding0_HTTP_Handler(srv))
	r.DELETE("/api/v1/keyboard/binding/{id}", _WebApi_DeleteUserKeyboardBinding0_HTTP_Handler(srv))
	r.GET("/api/v1/ice/candidates", _WebApi_GetServerICECandidate0_HTTP_Handler(srv))
	r.POST("/api/v1/game/graphic", _WebApi_SetGraphicOptions0_HTTP_Handler(srv))
	r.GET("/api/v1/game/graphic", _WebApi_GetGraphicOptions0_HTTP_Handler(srv))
}

func _WebApi_Register0_HTTP_Handler(srv WebApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWebApiRegister)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Register(ctx, req.(*RegisterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RegisterResponse)
		return ctx.Result(200, reply)
	}
}

func _WebApi_Login1_HTTP_Handler(srv WebApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWebApiLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginResponse)
		return ctx.Result(200, reply)
	}
}

func _WebApi_ListMyRooms0_HTTP_Handler(srv WebApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListRoomRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWebApiListMyRooms)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListMyRooms(ctx, req.(*ListRoomRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListRoomResponse)
		return ctx.Result(200, reply)
	}
}

func _WebApi_ListAllRooms0_HTTP_Handler(srv WebApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListRoomRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWebApiListAllRooms)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAllRooms(ctx, req.(*ListRoomRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListRoomResponse)
		return ctx.Result(200, reply)
	}
}

func _WebApi_CreateRoom0_HTTP_Handler(srv WebApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateRoomRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWebApiCreateRoom)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateRoom(ctx, req.(*CreateRoomRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateRoomResponse)
		return ctx.Result(200, reply)
	}
}

func _WebApi_GetRoom0_HTTP_Handler(srv WebApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRoomRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWebApiGetRoom)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRoom(ctx, req.(*GetRoomRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetRoomResponse)
		return ctx.Result(200, reply)
	}
}

func _WebApi_GetUser0_HTTP_Handler(srv WebApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWebApiGetUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUser(ctx, req.(*GetUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserResponse)
		return ctx.Result(200, reply)
	}
}

func _WebApi_OpenGameConnection0_HTTP_Handler(srv WebApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OpenGameConnectionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWebApiOpenGameConnection)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OpenGameConnection(ctx, req.(*OpenGameConnectionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OpenGameConnectionResponse)
		return ctx.Result(200, reply)
	}
}

func _WebApi_SDPAnswer0_HTTP_Handler(srv WebApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SDPAnswerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWebApiSDPAnswer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SDPAnswer(ctx, req.(*SDPAnswerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SDPAnswerResponse)
		return ctx.Result(200, reply)
	}
}

func _WebApi_AddICECandidate0_HTTP_Handler(srv WebApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddICECandidateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWebApiAddICECandidate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddICECandidate(ctx, req.(*AddICECandidateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddICECandidateResponse)
		return ctx.Result(200, reply)
	}
}

func _WebApi_ListMembers0_HTTP_Handler(srv WebApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListMemberRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWebApiListMembers)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListMembers(ctx, req.(*ListMemberRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListMemberResponse)
		return ctx.Result(200, reply)
	}
}

func _WebApi_JoinRoom0_HTTP_Handler(srv WebApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in JoinRoomRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWebApiJoinRoom)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.JoinRoom(ctx, req.(*JoinRoomRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*JoinRoomResponse)
		return ctx.Result(200, reply)
	}
}

func _WebApi_DeleteRoom0_HTTP_Handler(srv WebApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteRoomRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWebApiDeleteRoom)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteRoom(ctx, req.(*DeleteRoomRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteRoomResponse)
		return ctx.Result(200, reply)
	}
}

func _WebApi_UpdateRoom0_HTTP_Handler(srv WebApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateRoomRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWebApiUpdateRoom)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateRoom(ctx, req.(*UpdateRoomRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateRoomResponse)
		return ctx.Result(200, reply)
	}
}

func _WebApi_GetRoomMember0_HTTP_Handler(srv WebApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRoomMemberRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWebApiGetRoomMember)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRoomMember(ctx, req.(*GetRoomMemberRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetRoomMemberResponse)
		return ctx.Result(200, reply)
	}
}

func _WebApi_ListGames1_HTTP_Handler(srv WebApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListGamesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWebApiListGames)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListGames(ctx, req.(*ListGamesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListGamesResponse)
		return ctx.Result(200, reply)
	}
}

func _WebApi_SetController0_HTTP_Handler(srv WebApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetControllerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWebApiSetController)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetController(ctx, req.(*SetControllerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetControllerResponse)
		return ctx.Result(200, reply)
	}
}

func _WebApi_UpdateMemberRole0_HTTP_Handler(srv WebApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateMemberRoleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWebApiUpdateMemberRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateMemberRole(ctx, req.(*UpdateMemberRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateMemberRoleResponse)
		return ctx.Result(200, reply)
	}
}

func _WebApi_DeleteMember0_HTTP_Handler(srv WebApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteMemberRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWebApiDeleteMember)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteMember(ctx, req.(*DeleteMemberRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteMemberResponse)
		return ctx.Result(200, reply)
	}
}

func _WebApi_SaveGame0_HTTP_Handler(srv WebApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SaveGameRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWebApiSaveGame)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SaveGame(ctx, req.(*SaveGameRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SaveGameResponse)
		return ctx.Result(200, reply)
	}
}

func _WebApi_LoadSave0_HTTP_Handler(srv WebApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoadSaveRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWebApiLoadSave)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LoadSave(ctx, req.(*LoadSaveRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoadSaveResponse)
		return ctx.Result(200, reply)
	}
}

func _WebApi_ListSaves0_HTTP_Handler(srv WebApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListSavesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWebApiListSaves)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListSaves(ctx, req.(*ListSavesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListSavesResponse)
		return ctx.Result(200, reply)
	}
}

func _WebApi_RestartEmulator0_HTTP_Handler(srv WebApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RestartEmulatorRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWebApiRestartEmulator)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RestartEmulator(ctx, req.(*RestartEmulatorRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RestartEmulatorResponse)
		return ctx.Result(200, reply)
	}
}

func _WebApi_DeleteSave0_HTTP_Handler(srv WebApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteSaveRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWebApiDeleteSave)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteSave(ctx, req.(*DeleteSaveRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteSaveResponse)
		return ctx.Result(200, reply)
	}
}

func _WebApi_CreateUserKeyboardBinding0_HTTP_Handler(srv WebApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateUserKeyboardBindingRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWebApiCreateUserKeyboardBinding)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateUserKeyboardBinding(ctx, req.(*CreateUserKeyboardBindingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateUserKeyboardBindingResponse)
		return ctx.Result(200, reply)
	}
}

func _WebApi_ListUserKeyboardBinding0_HTTP_Handler(srv WebApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListUserKeyboardBindingRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWebApiListUserKeyboardBinding)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUserKeyboardBinding(ctx, req.(*ListUserKeyboardBindingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUserKeyboardBindingResponse)
		return ctx.Result(200, reply)
	}
}

func _WebApi_GetUserKeyboardBinding0_HTTP_Handler(srv WebApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserKeyboardBindingRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWebApiGetUserKeyboardBinding)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserKeyboardBinding(ctx, req.(*GetUserKeyboardBindingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserKeyboardBindingResponse)
		return ctx.Result(200, reply)
	}
}

func _WebApi_UpdateUserKeyboardBinding0_HTTP_Handler(srv WebApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateUserKeyboardBindingRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWebApiUpdateUserKeyboardBinding)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateUserKeyboardBinding(ctx, req.(*UpdateUserKeyboardBindingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateUserKeyboardBindingResponse)
		return ctx.Result(200, reply)
	}
}

func _WebApi_DeleteUserKeyboardBinding0_HTTP_Handler(srv WebApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteUserKeyboardBindingRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWebApiDeleteUserKeyboardBinding)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteUserKeyboardBinding(ctx, req.(*DeleteUserKeyboardBindingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteUserKeyboardBindingResponse)
		return ctx.Result(200, reply)
	}
}

func _WebApi_GetServerICECandidate0_HTTP_Handler(srv WebApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetServerICECandidateRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWebApiGetServerICECandidate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetServerICECandidate(ctx, req.(*GetServerICECandidateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetServerICECandidateResponse)
		return ctx.Result(200, reply)
	}
}

func _WebApi_SetGraphicOptions0_HTTP_Handler(srv WebApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetGraphicOptionsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWebApiSetGraphicOptions)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetGraphicOptions(ctx, req.(*SetGraphicOptionsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetGraphicOptionsResponse)
		return ctx.Result(200, reply)
	}
}

func _WebApi_GetGraphicOptions0_HTTP_Handler(srv WebApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetGraphicOptionsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWebApiGetGraphicOptions)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetGraphicOptions(ctx, req.(*GetGraphicOptionsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetGraphicOptionsResponse)
		return ctx.Result(200, reply)
	}
}

type WebApiHTTPClient interface {
	AddICECandidate(ctx context.Context, req *AddICECandidateRequest, opts ...http.CallOption) (rsp *AddICECandidateResponse, err error)
	CreateRoom(ctx context.Context, req *CreateRoomRequest, opts ...http.CallOption) (rsp *CreateRoomResponse, err error)
	CreateUserKeyboardBinding(ctx context.Context, req *CreateUserKeyboardBindingRequest, opts ...http.CallOption) (rsp *CreateUserKeyboardBindingResponse, err error)
	DeleteMember(ctx context.Context, req *DeleteMemberRequest, opts ...http.CallOption) (rsp *DeleteMemberResponse, err error)
	DeleteRoom(ctx context.Context, req *DeleteRoomRequest, opts ...http.CallOption) (rsp *DeleteRoomResponse, err error)
	DeleteSave(ctx context.Context, req *DeleteSaveRequest, opts ...http.CallOption) (rsp *DeleteSaveResponse, err error)
	DeleteUserKeyboardBinding(ctx context.Context, req *DeleteUserKeyboardBindingRequest, opts ...http.CallOption) (rsp *DeleteUserKeyboardBindingResponse, err error)
	GetGraphicOptions(ctx context.Context, req *GetGraphicOptionsRequest, opts ...http.CallOption) (rsp *GetGraphicOptionsResponse, err error)
	GetRoom(ctx context.Context, req *GetRoomRequest, opts ...http.CallOption) (rsp *GetRoomResponse, err error)
	GetRoomMember(ctx context.Context, req *GetRoomMemberRequest, opts ...http.CallOption) (rsp *GetRoomMemberResponse, err error)
	GetServerICECandidate(ctx context.Context, req *GetServerICECandidateRequest, opts ...http.CallOption) (rsp *GetServerICECandidateResponse, err error)
	GetUser(ctx context.Context, req *GetUserRequest, opts ...http.CallOption) (rsp *GetUserResponse, err error)
	GetUserKeyboardBinding(ctx context.Context, req *GetUserKeyboardBindingRequest, opts ...http.CallOption) (rsp *GetUserKeyboardBindingResponse, err error)
	JoinRoom(ctx context.Context, req *JoinRoomRequest, opts ...http.CallOption) (rsp *JoinRoomResponse, err error)
	ListAllRooms(ctx context.Context, req *ListRoomRequest, opts ...http.CallOption) (rsp *ListRoomResponse, err error)
	ListGames(ctx context.Context, req *ListGamesRequest, opts ...http.CallOption) (rsp *ListGamesResponse, err error)
	ListMembers(ctx context.Context, req *ListMemberRequest, opts ...http.CallOption) (rsp *ListMemberResponse, err error)
	ListMyRooms(ctx context.Context, req *ListRoomRequest, opts ...http.CallOption) (rsp *ListRoomResponse, err error)
	ListSaves(ctx context.Context, req *ListSavesRequest, opts ...http.CallOption) (rsp *ListSavesResponse, err error)
	ListUserKeyboardBinding(ctx context.Context, req *ListUserKeyboardBindingRequest, opts ...http.CallOption) (rsp *ListUserKeyboardBindingResponse, err error)
	LoadSave(ctx context.Context, req *LoadSaveRequest, opts ...http.CallOption) (rsp *LoadSaveResponse, err error)
	Login(ctx context.Context, req *LoginRequest, opts ...http.CallOption) (rsp *LoginResponse, err error)
	OpenGameConnection(ctx context.Context, req *OpenGameConnectionRequest, opts ...http.CallOption) (rsp *OpenGameConnectionResponse, err error)
	Register(ctx context.Context, req *RegisterRequest, opts ...http.CallOption) (rsp *RegisterResponse, err error)
	RestartEmulator(ctx context.Context, req *RestartEmulatorRequest, opts ...http.CallOption) (rsp *RestartEmulatorResponse, err error)
	SDPAnswer(ctx context.Context, req *SDPAnswerRequest, opts ...http.CallOption) (rsp *SDPAnswerResponse, err error)
	SaveGame(ctx context.Context, req *SaveGameRequest, opts ...http.CallOption) (rsp *SaveGameResponse, err error)
	SetController(ctx context.Context, req *SetControllerRequest, opts ...http.CallOption) (rsp *SetControllerResponse, err error)
	SetGraphicOptions(ctx context.Context, req *SetGraphicOptionsRequest, opts ...http.CallOption) (rsp *SetGraphicOptionsResponse, err error)
	UpdateMemberRole(ctx context.Context, req *UpdateMemberRoleRequest, opts ...http.CallOption) (rsp *UpdateMemberRoleResponse, err error)
	UpdateRoom(ctx context.Context, req *UpdateRoomRequest, opts ...http.CallOption) (rsp *UpdateRoomResponse, err error)
	UpdateUserKeyboardBinding(ctx context.Context, req *UpdateUserKeyboardBindingRequest, opts ...http.CallOption) (rsp *UpdateUserKeyboardBindingResponse, err error)
}

type WebApiHTTPClientImpl struct {
	cc *http.Client
}

func NewWebApiHTTPClient(client *http.Client) WebApiHTTPClient {
	return &WebApiHTTPClientImpl{client}
}

func (c *WebApiHTTPClientImpl) AddICECandidate(ctx context.Context, in *AddICECandidateRequest, opts ...http.CallOption) (*AddICECandidateResponse, error) {
	var out AddICECandidateResponse
	pattern := "/api/v1/game/ice"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWebApiAddICECandidate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WebApiHTTPClientImpl) CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...http.CallOption) (*CreateRoomResponse, error) {
	var out CreateRoomResponse
	pattern := "/api/v1/room"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWebApiCreateRoom))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WebApiHTTPClientImpl) CreateUserKeyboardBinding(ctx context.Context, in *CreateUserKeyboardBindingRequest, opts ...http.CallOption) (*CreateUserKeyboardBindingResponse, error) {
	var out CreateUserKeyboardBindingResponse
	pattern := "/api/v1/keyboard/binding"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWebApiCreateUserKeyboardBinding))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WebApiHTTPClientImpl) DeleteMember(ctx context.Context, in *DeleteMemberRequest, opts ...http.CallOption) (*DeleteMemberResponse, error) {
	var out DeleteMemberResponse
	pattern := "/api/v1/member"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationWebApiDeleteMember))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WebApiHTTPClientImpl) DeleteRoom(ctx context.Context, in *DeleteRoomRequest, opts ...http.CallOption) (*DeleteRoomResponse, error) {
	var out DeleteRoomResponse
	pattern := "/api/v1/room/{roomId}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationWebApiDeleteRoom))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WebApiHTTPClientImpl) DeleteSave(ctx context.Context, in *DeleteSaveRequest, opts ...http.CallOption) (*DeleteSaveResponse, error) {
	var out DeleteSaveResponse
	pattern := "/api/v1/game/save"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationWebApiDeleteSave))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WebApiHTTPClientImpl) DeleteUserKeyboardBinding(ctx context.Context, in *DeleteUserKeyboardBindingRequest, opts ...http.CallOption) (*DeleteUserKeyboardBindingResponse, error) {
	var out DeleteUserKeyboardBindingResponse
	pattern := "/api/v1/keyboard/binding/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationWebApiDeleteUserKeyboardBinding))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WebApiHTTPClientImpl) GetGraphicOptions(ctx context.Context, in *GetGraphicOptionsRequest, opts ...http.CallOption) (*GetGraphicOptionsResponse, error) {
	var out GetGraphicOptionsResponse
	pattern := "/api/v1/game/graphic"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationWebApiGetGraphicOptions))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WebApiHTTPClientImpl) GetRoom(ctx context.Context, in *GetRoomRequest, opts ...http.CallOption) (*GetRoomResponse, error) {
	var out GetRoomResponse
	pattern := "/api/v1/room/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationWebApiGetRoom))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WebApiHTTPClientImpl) GetRoomMember(ctx context.Context, in *GetRoomMemberRequest, opts ...http.CallOption) (*GetRoomMemberResponse, error) {
	var out GetRoomMemberResponse
	pattern := "/api/v1/member/{roomId}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationWebApiGetRoomMember))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WebApiHTTPClientImpl) GetServerICECandidate(ctx context.Context, in *GetServerICECandidateRequest, opts ...http.CallOption) (*GetServerICECandidateResponse, error) {
	var out GetServerICECandidateResponse
	pattern := "/api/v1/ice/candidates"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationWebApiGetServerICECandidate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WebApiHTTPClientImpl) GetUser(ctx context.Context, in *GetUserRequest, opts ...http.CallOption) (*GetUserResponse, error) {
	var out GetUserResponse
	pattern := "/api/v1/user/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationWebApiGetUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WebApiHTTPClientImpl) GetUserKeyboardBinding(ctx context.Context, in *GetUserKeyboardBindingRequest, opts ...http.CallOption) (*GetUserKeyboardBindingResponse, error) {
	var out GetUserKeyboardBindingResponse
	pattern := "/api/v1/keyboard/binding/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationWebApiGetUserKeyboardBinding))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WebApiHTTPClientImpl) JoinRoom(ctx context.Context, in *JoinRoomRequest, opts ...http.CallOption) (*JoinRoomResponse, error) {
	var out JoinRoomResponse
	pattern := "/api/v1/room/{roomId}/join"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWebApiJoinRoom))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WebApiHTTPClientImpl) ListAllRooms(ctx context.Context, in *ListRoomRequest, opts ...http.CallOption) (*ListRoomResponse, error) {
	var out ListRoomResponse
	pattern := "/api/v1/rooms"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationWebApiListAllRooms))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WebApiHTTPClientImpl) ListGames(ctx context.Context, in *ListGamesRequest, opts ...http.CallOption) (*ListGamesResponse, error) {
	var out ListGamesResponse
	pattern := "/api/v1/games"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationWebApiListGames))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WebApiHTTPClientImpl) ListMembers(ctx context.Context, in *ListMemberRequest, opts ...http.CallOption) (*ListMemberResponse, error) {
	var out ListMemberResponse
	pattern := "/api/v1/members"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationWebApiListMembers))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WebApiHTTPClientImpl) ListMyRooms(ctx context.Context, in *ListRoomRequest, opts ...http.CallOption) (*ListRoomResponse, error) {
	var out ListRoomResponse
	pattern := "/api/v1/rooms/joined"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationWebApiListMyRooms))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WebApiHTTPClientImpl) ListSaves(ctx context.Context, in *ListSavesRequest, opts ...http.CallOption) (*ListSavesResponse, error) {
	var out ListSavesResponse
	pattern := "/api/v1/game/saves"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationWebApiListSaves))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WebApiHTTPClientImpl) ListUserKeyboardBinding(ctx context.Context, in *ListUserKeyboardBindingRequest, opts ...http.CallOption) (*ListUserKeyboardBindingResponse, error) {
	var out ListUserKeyboardBindingResponse
	pattern := "/api/v1/keyboard/bindings"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationWebApiListUserKeyboardBinding))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WebApiHTTPClientImpl) LoadSave(ctx context.Context, in *LoadSaveRequest, opts ...http.CallOption) (*LoadSaveResponse, error) {
	var out LoadSaveResponse
	pattern := "/api/v1/game/load"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWebApiLoadSave))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WebApiHTTPClientImpl) Login(ctx context.Context, in *LoginRequest, opts ...http.CallOption) (*LoginResponse, error) {
	var out LoginResponse
	pattern := "/api/v1/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWebApiLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WebApiHTTPClientImpl) OpenGameConnection(ctx context.Context, in *OpenGameConnectionRequest, opts ...http.CallOption) (*OpenGameConnectionResponse, error) {
	var out OpenGameConnectionResponse
	pattern := "/api/v1/game/connection"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWebApiOpenGameConnection))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WebApiHTTPClientImpl) Register(ctx context.Context, in *RegisterRequest, opts ...http.CallOption) (*RegisterResponse, error) {
	var out RegisterResponse
	pattern := "/api/v1/register"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWebApiRegister))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WebApiHTTPClientImpl) RestartEmulator(ctx context.Context, in *RestartEmulatorRequest, opts ...http.CallOption) (*RestartEmulatorResponse, error) {
	var out RestartEmulatorResponse
	pattern := "/api/v1/game/restart"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWebApiRestartEmulator))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WebApiHTTPClientImpl) SDPAnswer(ctx context.Context, in *SDPAnswerRequest, opts ...http.CallOption) (*SDPAnswerResponse, error) {
	var out SDPAnswerResponse
	pattern := "/api/v1/game/sdp"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWebApiSDPAnswer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WebApiHTTPClientImpl) SaveGame(ctx context.Context, in *SaveGameRequest, opts ...http.CallOption) (*SaveGameResponse, error) {
	var out SaveGameResponse
	pattern := "/api/v1/game/save"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWebApiSaveGame))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WebApiHTTPClientImpl) SetController(ctx context.Context, in *SetControllerRequest, opts ...http.CallOption) (*SetControllerResponse, error) {
	var out SetControllerResponse
	pattern := "/api/v1/game/controller"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWebApiSetController))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WebApiHTTPClientImpl) SetGraphicOptions(ctx context.Context, in *SetGraphicOptionsRequest, opts ...http.CallOption) (*SetGraphicOptionsResponse, error) {
	var out SetGraphicOptionsResponse
	pattern := "/api/v1/game/graphic"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWebApiSetGraphicOptions))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WebApiHTTPClientImpl) UpdateMemberRole(ctx context.Context, in *UpdateMemberRoleRequest, opts ...http.CallOption) (*UpdateMemberRoleResponse, error) {
	var out UpdateMemberRoleResponse
	pattern := "/api/v1/member/role"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWebApiUpdateMemberRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WebApiHTTPClientImpl) UpdateRoom(ctx context.Context, in *UpdateRoomRequest, opts ...http.CallOption) (*UpdateRoomResponse, error) {
	var out UpdateRoomResponse
	pattern := "/api/v1/room/{roomId}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWebApiUpdateRoom))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WebApiHTTPClientImpl) UpdateUserKeyboardBinding(ctx context.Context, in *UpdateUserKeyboardBindingRequest, opts ...http.CallOption) (*UpdateUserKeyboardBindingResponse, error) {
	var out UpdateUserKeyboardBindingResponse
	pattern := "/api/v1/keyboard/binding"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWebApiUpdateUserKeyboardBinding))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
