// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: app/webapi/v1/nesgo.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WebApi_Register_FullMethodName                  = "/nesgo.webapi.v1.WebApi/Register"
	WebApi_Login_FullMethodName                     = "/nesgo.webapi.v1.WebApi/Login"
	WebApi_ListMyRooms_FullMethodName               = "/nesgo.webapi.v1.WebApi/ListMyRooms"
	WebApi_ListAllRooms_FullMethodName              = "/nesgo.webapi.v1.WebApi/ListAllRooms"
	WebApi_CreateRoom_FullMethodName                = "/nesgo.webapi.v1.WebApi/CreateRoom"
	WebApi_GetRoom_FullMethodName                   = "/nesgo.webapi.v1.WebApi/GetRoom"
	WebApi_GetUser_FullMethodName                   = "/nesgo.webapi.v1.WebApi/GetUser"
	WebApi_OpenGameConnection_FullMethodName        = "/nesgo.webapi.v1.WebApi/OpenGameConnection"
	WebApi_SDPAnswer_FullMethodName                 = "/nesgo.webapi.v1.WebApi/SDPAnswer"
	WebApi_AddICECandidate_FullMethodName           = "/nesgo.webapi.v1.WebApi/AddICECandidate"
	WebApi_ListMembers_FullMethodName               = "/nesgo.webapi.v1.WebApi/ListMembers"
	WebApi_JoinRoom_FullMethodName                  = "/nesgo.webapi.v1.WebApi/JoinRoom"
	WebApi_DeleteRoom_FullMethodName                = "/nesgo.webapi.v1.WebApi/DeleteRoom"
	WebApi_UpdateRoom_FullMethodName                = "/nesgo.webapi.v1.WebApi/UpdateRoom"
	WebApi_GetRoomMember_FullMethodName             = "/nesgo.webapi.v1.WebApi/GetRoomMember"
	WebApi_ListGames_FullMethodName                 = "/nesgo.webapi.v1.WebApi/ListGames"
	WebApi_SetController_FullMethodName             = "/nesgo.webapi.v1.WebApi/SetController"
	WebApi_UpdateMemberRole_FullMethodName          = "/nesgo.webapi.v1.WebApi/UpdateMemberRole"
	WebApi_DeleteMember_FullMethodName              = "/nesgo.webapi.v1.WebApi/DeleteMember"
	WebApi_SaveGame_FullMethodName                  = "/nesgo.webapi.v1.WebApi/SaveGame"
	WebApi_LoadSave_FullMethodName                  = "/nesgo.webapi.v1.WebApi/LoadSave"
	WebApi_ListSaves_FullMethodName                 = "/nesgo.webapi.v1.WebApi/ListSaves"
	WebApi_RestartEmulator_FullMethodName           = "/nesgo.webapi.v1.WebApi/RestartEmulator"
	WebApi_DeleteSave_FullMethodName                = "/nesgo.webapi.v1.WebApi/DeleteSave"
	WebApi_CreateUserKeyboardBinding_FullMethodName = "/nesgo.webapi.v1.WebApi/CreateUserKeyboardBinding"
	WebApi_ListUserKeyboardBinding_FullMethodName   = "/nesgo.webapi.v1.WebApi/ListUserKeyboardBinding"
	WebApi_GetUserKeyboardBinding_FullMethodName    = "/nesgo.webapi.v1.WebApi/GetUserKeyboardBinding"
	WebApi_UpdateUserKeyboardBinding_FullMethodName = "/nesgo.webapi.v1.WebApi/UpdateUserKeyboardBinding"
	WebApi_DeleteUserKeyboardBinding_FullMethodName = "/nesgo.webapi.v1.WebApi/DeleteUserKeyboardBinding"
	WebApi_GetServerICECandidate_FullMethodName     = "/nesgo.webapi.v1.WebApi/GetServerICECandidate"
	WebApi_SetGraphicOptions_FullMethodName         = "/nesgo.webapi.v1.WebApi/SetGraphicOptions"
	WebApi_GetGraphicOptions_FullMethodName         = "/nesgo.webapi.v1.WebApi/GetGraphicOptions"
	WebApi_CreateMacro_FullMethodName               = "/nesgo.webapi.v1.WebApi/CreateMacro"
	WebApi_GetMacro_FullMethodName                  = "/nesgo.webapi.v1.WebApi/GetMacro"
	WebApi_ListMacro_FullMethodName                 = "/nesgo.webapi.v1.WebApi/ListMacro"
	WebApi_DeleteMacro_FullMethodName               = "/nesgo.webapi.v1.WebApi/DeleteMacro"
)

// WebApiClient is the client API for WebApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebApiClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	ListMyRooms(ctx context.Context, in *ListRoomRequest, opts ...grpc.CallOption) (*ListRoomResponse, error)
	ListAllRooms(ctx context.Context, in *ListRoomRequest, opts ...grpc.CallOption) (*ListRoomResponse, error)
	CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*CreateRoomResponse, error)
	GetRoom(ctx context.Context, in *GetRoomRequest, opts ...grpc.CallOption) (*GetRoomResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	OpenGameConnection(ctx context.Context, in *OpenGameConnectionRequest, opts ...grpc.CallOption) (*OpenGameConnectionResponse, error)
	SDPAnswer(ctx context.Context, in *SDPAnswerRequest, opts ...grpc.CallOption) (*SDPAnswerResponse, error)
	AddICECandidate(ctx context.Context, in *AddICECandidateRequest, opts ...grpc.CallOption) (*AddICECandidateResponse, error)
	ListMembers(ctx context.Context, in *ListMemberRequest, opts ...grpc.CallOption) (*ListMemberResponse, error)
	JoinRoom(ctx context.Context, in *JoinRoomRequest, opts ...grpc.CallOption) (*JoinRoomResponse, error)
	DeleteRoom(ctx context.Context, in *DeleteRoomRequest, opts ...grpc.CallOption) (*DeleteRoomResponse, error)
	UpdateRoom(ctx context.Context, in *UpdateRoomRequest, opts ...grpc.CallOption) (*UpdateRoomResponse, error)
	GetRoomMember(ctx context.Context, in *GetRoomMemberRequest, opts ...grpc.CallOption) (*GetRoomMemberResponse, error)
	ListGames(ctx context.Context, in *ListGamesRequest, opts ...grpc.CallOption) (*ListGamesResponse, error)
	SetController(ctx context.Context, in *SetControllerRequest, opts ...grpc.CallOption) (*SetControllerResponse, error)
	UpdateMemberRole(ctx context.Context, in *UpdateMemberRoleRequest, opts ...grpc.CallOption) (*UpdateMemberRoleResponse, error)
	DeleteMember(ctx context.Context, in *DeleteMemberRequest, opts ...grpc.CallOption) (*DeleteMemberResponse, error)
	SaveGame(ctx context.Context, in *SaveGameRequest, opts ...grpc.CallOption) (*SaveGameResponse, error)
	LoadSave(ctx context.Context, in *LoadSaveRequest, opts ...grpc.CallOption) (*LoadSaveResponse, error)
	ListSaves(ctx context.Context, in *ListSavesRequest, opts ...grpc.CallOption) (*ListSavesResponse, error)
	RestartEmulator(ctx context.Context, in *RestartEmulatorRequest, opts ...grpc.CallOption) (*RestartEmulatorResponse, error)
	DeleteSave(ctx context.Context, in *DeleteSaveRequest, opts ...grpc.CallOption) (*DeleteSaveResponse, error)
	CreateUserKeyboardBinding(ctx context.Context, in *CreateUserKeyboardBindingRequest, opts ...grpc.CallOption) (*CreateUserKeyboardBindingResponse, error)
	ListUserKeyboardBinding(ctx context.Context, in *ListUserKeyboardBindingRequest, opts ...grpc.CallOption) (*ListUserKeyboardBindingResponse, error)
	GetUserKeyboardBinding(ctx context.Context, in *GetUserKeyboardBindingRequest, opts ...grpc.CallOption) (*GetUserKeyboardBindingResponse, error)
	UpdateUserKeyboardBinding(ctx context.Context, in *UpdateUserKeyboardBindingRequest, opts ...grpc.CallOption) (*UpdateUserKeyboardBindingResponse, error)
	DeleteUserKeyboardBinding(ctx context.Context, in *DeleteUserKeyboardBindingRequest, opts ...grpc.CallOption) (*DeleteUserKeyboardBindingResponse, error)
	GetServerICECandidate(ctx context.Context, in *GetServerICECandidateRequest, opts ...grpc.CallOption) (*GetServerICECandidateResponse, error)
	SetGraphicOptions(ctx context.Context, in *SetGraphicOptionsRequest, opts ...grpc.CallOption) (*SetGraphicOptionsResponse, error)
	GetGraphicOptions(ctx context.Context, in *GetGraphicOptionsRequest, opts ...grpc.CallOption) (*GetGraphicOptionsResponse, error)
	CreateMacro(ctx context.Context, in *CreateMacroRequest, opts ...grpc.CallOption) (*CreateMacroResponse, error)
	GetMacro(ctx context.Context, in *GetMacroRequest, opts ...grpc.CallOption) (*GetMacroResponse, error)
	ListMacro(ctx context.Context, in *ListMacroRequest, opts ...grpc.CallOption) (*ListMacroResponse, error)
	DeleteMacro(ctx context.Context, in *DeleteMacroRequest, opts ...grpc.CallOption) (*DeleteMacroResponse, error)
}

type webApiClient struct {
	cc grpc.ClientConnInterface
}

func NewWebApiClient(cc grpc.ClientConnInterface) WebApiClient {
	return &webApiClient{cc}
}

func (c *webApiClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, WebApi_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, WebApi_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) ListMyRooms(ctx context.Context, in *ListRoomRequest, opts ...grpc.CallOption) (*ListRoomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRoomResponse)
	err := c.cc.Invoke(ctx, WebApi_ListMyRooms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) ListAllRooms(ctx context.Context, in *ListRoomRequest, opts ...grpc.CallOption) (*ListRoomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRoomResponse)
	err := c.cc.Invoke(ctx, WebApi_ListAllRooms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*CreateRoomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRoomResponse)
	err := c.cc.Invoke(ctx, WebApi_CreateRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) GetRoom(ctx context.Context, in *GetRoomRequest, opts ...grpc.CallOption) (*GetRoomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRoomResponse)
	err := c.cc.Invoke(ctx, WebApi_GetRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, WebApi_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) OpenGameConnection(ctx context.Context, in *OpenGameConnectionRequest, opts ...grpc.CallOption) (*OpenGameConnectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OpenGameConnectionResponse)
	err := c.cc.Invoke(ctx, WebApi_OpenGameConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) SDPAnswer(ctx context.Context, in *SDPAnswerRequest, opts ...grpc.CallOption) (*SDPAnswerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SDPAnswerResponse)
	err := c.cc.Invoke(ctx, WebApi_SDPAnswer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) AddICECandidate(ctx context.Context, in *AddICECandidateRequest, opts ...grpc.CallOption) (*AddICECandidateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddICECandidateResponse)
	err := c.cc.Invoke(ctx, WebApi_AddICECandidate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) ListMembers(ctx context.Context, in *ListMemberRequest, opts ...grpc.CallOption) (*ListMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMemberResponse)
	err := c.cc.Invoke(ctx, WebApi_ListMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) JoinRoom(ctx context.Context, in *JoinRoomRequest, opts ...grpc.CallOption) (*JoinRoomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinRoomResponse)
	err := c.cc.Invoke(ctx, WebApi_JoinRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) DeleteRoom(ctx context.Context, in *DeleteRoomRequest, opts ...grpc.CallOption) (*DeleteRoomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRoomResponse)
	err := c.cc.Invoke(ctx, WebApi_DeleteRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) UpdateRoom(ctx context.Context, in *UpdateRoomRequest, opts ...grpc.CallOption) (*UpdateRoomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRoomResponse)
	err := c.cc.Invoke(ctx, WebApi_UpdateRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) GetRoomMember(ctx context.Context, in *GetRoomMemberRequest, opts ...grpc.CallOption) (*GetRoomMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRoomMemberResponse)
	err := c.cc.Invoke(ctx, WebApi_GetRoomMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) ListGames(ctx context.Context, in *ListGamesRequest, opts ...grpc.CallOption) (*ListGamesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListGamesResponse)
	err := c.cc.Invoke(ctx, WebApi_ListGames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) SetController(ctx context.Context, in *SetControllerRequest, opts ...grpc.CallOption) (*SetControllerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetControllerResponse)
	err := c.cc.Invoke(ctx, WebApi_SetController_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) UpdateMemberRole(ctx context.Context, in *UpdateMemberRoleRequest, opts ...grpc.CallOption) (*UpdateMemberRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMemberRoleResponse)
	err := c.cc.Invoke(ctx, WebApi_UpdateMemberRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) DeleteMember(ctx context.Context, in *DeleteMemberRequest, opts ...grpc.CallOption) (*DeleteMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMemberResponse)
	err := c.cc.Invoke(ctx, WebApi_DeleteMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) SaveGame(ctx context.Context, in *SaveGameRequest, opts ...grpc.CallOption) (*SaveGameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveGameResponse)
	err := c.cc.Invoke(ctx, WebApi_SaveGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) LoadSave(ctx context.Context, in *LoadSaveRequest, opts ...grpc.CallOption) (*LoadSaveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoadSaveResponse)
	err := c.cc.Invoke(ctx, WebApi_LoadSave_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) ListSaves(ctx context.Context, in *ListSavesRequest, opts ...grpc.CallOption) (*ListSavesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSavesResponse)
	err := c.cc.Invoke(ctx, WebApi_ListSaves_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) RestartEmulator(ctx context.Context, in *RestartEmulatorRequest, opts ...grpc.CallOption) (*RestartEmulatorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestartEmulatorResponse)
	err := c.cc.Invoke(ctx, WebApi_RestartEmulator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) DeleteSave(ctx context.Context, in *DeleteSaveRequest, opts ...grpc.CallOption) (*DeleteSaveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSaveResponse)
	err := c.cc.Invoke(ctx, WebApi_DeleteSave_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) CreateUserKeyboardBinding(ctx context.Context, in *CreateUserKeyboardBindingRequest, opts ...grpc.CallOption) (*CreateUserKeyboardBindingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserKeyboardBindingResponse)
	err := c.cc.Invoke(ctx, WebApi_CreateUserKeyboardBinding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) ListUserKeyboardBinding(ctx context.Context, in *ListUserKeyboardBindingRequest, opts ...grpc.CallOption) (*ListUserKeyboardBindingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserKeyboardBindingResponse)
	err := c.cc.Invoke(ctx, WebApi_ListUserKeyboardBinding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) GetUserKeyboardBinding(ctx context.Context, in *GetUserKeyboardBindingRequest, opts ...grpc.CallOption) (*GetUserKeyboardBindingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserKeyboardBindingResponse)
	err := c.cc.Invoke(ctx, WebApi_GetUserKeyboardBinding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) UpdateUserKeyboardBinding(ctx context.Context, in *UpdateUserKeyboardBindingRequest, opts ...grpc.CallOption) (*UpdateUserKeyboardBindingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserKeyboardBindingResponse)
	err := c.cc.Invoke(ctx, WebApi_UpdateUserKeyboardBinding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) DeleteUserKeyboardBinding(ctx context.Context, in *DeleteUserKeyboardBindingRequest, opts ...grpc.CallOption) (*DeleteUserKeyboardBindingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserKeyboardBindingResponse)
	err := c.cc.Invoke(ctx, WebApi_DeleteUserKeyboardBinding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) GetServerICECandidate(ctx context.Context, in *GetServerICECandidateRequest, opts ...grpc.CallOption) (*GetServerICECandidateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetServerICECandidateResponse)
	err := c.cc.Invoke(ctx, WebApi_GetServerICECandidate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) SetGraphicOptions(ctx context.Context, in *SetGraphicOptionsRequest, opts ...grpc.CallOption) (*SetGraphicOptionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetGraphicOptionsResponse)
	err := c.cc.Invoke(ctx, WebApi_SetGraphicOptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) GetGraphicOptions(ctx context.Context, in *GetGraphicOptionsRequest, opts ...grpc.CallOption) (*GetGraphicOptionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGraphicOptionsResponse)
	err := c.cc.Invoke(ctx, WebApi_GetGraphicOptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) CreateMacro(ctx context.Context, in *CreateMacroRequest, opts ...grpc.CallOption) (*CreateMacroResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMacroResponse)
	err := c.cc.Invoke(ctx, WebApi_CreateMacro_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) GetMacro(ctx context.Context, in *GetMacroRequest, opts ...grpc.CallOption) (*GetMacroResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMacroResponse)
	err := c.cc.Invoke(ctx, WebApi_GetMacro_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) ListMacro(ctx context.Context, in *ListMacroRequest, opts ...grpc.CallOption) (*ListMacroResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMacroResponse)
	err := c.cc.Invoke(ctx, WebApi_ListMacro_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) DeleteMacro(ctx context.Context, in *DeleteMacroRequest, opts ...grpc.CallOption) (*DeleteMacroResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMacroResponse)
	err := c.cc.Invoke(ctx, WebApi_DeleteMacro_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebApiServer is the server API for WebApi service.
// All implementations must embed UnimplementedWebApiServer
// for forward compatibility.
type WebApiServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	ListMyRooms(context.Context, *ListRoomRequest) (*ListRoomResponse, error)
	ListAllRooms(context.Context, *ListRoomRequest) (*ListRoomResponse, error)
	CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomResponse, error)
	GetRoom(context.Context, *GetRoomRequest) (*GetRoomResponse, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	OpenGameConnection(context.Context, *OpenGameConnectionRequest) (*OpenGameConnectionResponse, error)
	SDPAnswer(context.Context, *SDPAnswerRequest) (*SDPAnswerResponse, error)
	AddICECandidate(context.Context, *AddICECandidateRequest) (*AddICECandidateResponse, error)
	ListMembers(context.Context, *ListMemberRequest) (*ListMemberResponse, error)
	JoinRoom(context.Context, *JoinRoomRequest) (*JoinRoomResponse, error)
	DeleteRoom(context.Context, *DeleteRoomRequest) (*DeleteRoomResponse, error)
	UpdateRoom(context.Context, *UpdateRoomRequest) (*UpdateRoomResponse, error)
	GetRoomMember(context.Context, *GetRoomMemberRequest) (*GetRoomMemberResponse, error)
	ListGames(context.Context, *ListGamesRequest) (*ListGamesResponse, error)
	SetController(context.Context, *SetControllerRequest) (*SetControllerResponse, error)
	UpdateMemberRole(context.Context, *UpdateMemberRoleRequest) (*UpdateMemberRoleResponse, error)
	DeleteMember(context.Context, *DeleteMemberRequest) (*DeleteMemberResponse, error)
	SaveGame(context.Context, *SaveGameRequest) (*SaveGameResponse, error)
	LoadSave(context.Context, *LoadSaveRequest) (*LoadSaveResponse, error)
	ListSaves(context.Context, *ListSavesRequest) (*ListSavesResponse, error)
	RestartEmulator(context.Context, *RestartEmulatorRequest) (*RestartEmulatorResponse, error)
	DeleteSave(context.Context, *DeleteSaveRequest) (*DeleteSaveResponse, error)
	CreateUserKeyboardBinding(context.Context, *CreateUserKeyboardBindingRequest) (*CreateUserKeyboardBindingResponse, error)
	ListUserKeyboardBinding(context.Context, *ListUserKeyboardBindingRequest) (*ListUserKeyboardBindingResponse, error)
	GetUserKeyboardBinding(context.Context, *GetUserKeyboardBindingRequest) (*GetUserKeyboardBindingResponse, error)
	UpdateUserKeyboardBinding(context.Context, *UpdateUserKeyboardBindingRequest) (*UpdateUserKeyboardBindingResponse, error)
	DeleteUserKeyboardBinding(context.Context, *DeleteUserKeyboardBindingRequest) (*DeleteUserKeyboardBindingResponse, error)
	GetServerICECandidate(context.Context, *GetServerICECandidateRequest) (*GetServerICECandidateResponse, error)
	SetGraphicOptions(context.Context, *SetGraphicOptionsRequest) (*SetGraphicOptionsResponse, error)
	GetGraphicOptions(context.Context, *GetGraphicOptionsRequest) (*GetGraphicOptionsResponse, error)
	CreateMacro(context.Context, *CreateMacroRequest) (*CreateMacroResponse, error)
	GetMacro(context.Context, *GetMacroRequest) (*GetMacroResponse, error)
	ListMacro(context.Context, *ListMacroRequest) (*ListMacroResponse, error)
	DeleteMacro(context.Context, *DeleteMacroRequest) (*DeleteMacroResponse, error)
	mustEmbedUnimplementedWebApiServer()
}

// UnimplementedWebApiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWebApiServer struct{}

func (UnimplementedWebApiServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedWebApiServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedWebApiServer) ListMyRooms(context.Context, *ListRoomRequest) (*ListRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMyRooms not implemented")
}
func (UnimplementedWebApiServer) ListAllRooms(context.Context, *ListRoomRequest) (*ListRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllRooms not implemented")
}
func (UnimplementedWebApiServer) CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (UnimplementedWebApiServer) GetRoom(context.Context, *GetRoomRequest) (*GetRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoom not implemented")
}
func (UnimplementedWebApiServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedWebApiServer) OpenGameConnection(context.Context, *OpenGameConnectionRequest) (*OpenGameConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenGameConnection not implemented")
}
func (UnimplementedWebApiServer) SDPAnswer(context.Context, *SDPAnswerRequest) (*SDPAnswerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SDPAnswer not implemented")
}
func (UnimplementedWebApiServer) AddICECandidate(context.Context, *AddICECandidateRequest) (*AddICECandidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddICECandidate not implemented")
}
func (UnimplementedWebApiServer) ListMembers(context.Context, *ListMemberRequest) (*ListMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMembers not implemented")
}
func (UnimplementedWebApiServer) JoinRoom(context.Context, *JoinRoomRequest) (*JoinRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinRoom not implemented")
}
func (UnimplementedWebApiServer) DeleteRoom(context.Context, *DeleteRoomRequest) (*DeleteRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoom not implemented")
}
func (UnimplementedWebApiServer) UpdateRoom(context.Context, *UpdateRoomRequest) (*UpdateRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoom not implemented")
}
func (UnimplementedWebApiServer) GetRoomMember(context.Context, *GetRoomMemberRequest) (*GetRoomMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoomMember not implemented")
}
func (UnimplementedWebApiServer) ListGames(context.Context, *ListGamesRequest) (*ListGamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGames not implemented")
}
func (UnimplementedWebApiServer) SetController(context.Context, *SetControllerRequest) (*SetControllerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetController not implemented")
}
func (UnimplementedWebApiServer) UpdateMemberRole(context.Context, *UpdateMemberRoleRequest) (*UpdateMemberRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemberRole not implemented")
}
func (UnimplementedWebApiServer) DeleteMember(context.Context, *DeleteMemberRequest) (*DeleteMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMember not implemented")
}
func (UnimplementedWebApiServer) SaveGame(context.Context, *SaveGameRequest) (*SaveGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveGame not implemented")
}
func (UnimplementedWebApiServer) LoadSave(context.Context, *LoadSaveRequest) (*LoadSaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadSave not implemented")
}
func (UnimplementedWebApiServer) ListSaves(context.Context, *ListSavesRequest) (*ListSavesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSaves not implemented")
}
func (UnimplementedWebApiServer) RestartEmulator(context.Context, *RestartEmulatorRequest) (*RestartEmulatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartEmulator not implemented")
}
func (UnimplementedWebApiServer) DeleteSave(context.Context, *DeleteSaveRequest) (*DeleteSaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSave not implemented")
}
func (UnimplementedWebApiServer) CreateUserKeyboardBinding(context.Context, *CreateUserKeyboardBindingRequest) (*CreateUserKeyboardBindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserKeyboardBinding not implemented")
}
func (UnimplementedWebApiServer) ListUserKeyboardBinding(context.Context, *ListUserKeyboardBindingRequest) (*ListUserKeyboardBindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserKeyboardBinding not implemented")
}
func (UnimplementedWebApiServer) GetUserKeyboardBinding(context.Context, *GetUserKeyboardBindingRequest) (*GetUserKeyboardBindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserKeyboardBinding not implemented")
}
func (UnimplementedWebApiServer) UpdateUserKeyboardBinding(context.Context, *UpdateUserKeyboardBindingRequest) (*UpdateUserKeyboardBindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserKeyboardBinding not implemented")
}
func (UnimplementedWebApiServer) DeleteUserKeyboardBinding(context.Context, *DeleteUserKeyboardBindingRequest) (*DeleteUserKeyboardBindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserKeyboardBinding not implemented")
}
func (UnimplementedWebApiServer) GetServerICECandidate(context.Context, *GetServerICECandidateRequest) (*GetServerICECandidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerICECandidate not implemented")
}
func (UnimplementedWebApiServer) SetGraphicOptions(context.Context, *SetGraphicOptionsRequest) (*SetGraphicOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGraphicOptions not implemented")
}
func (UnimplementedWebApiServer) GetGraphicOptions(context.Context, *GetGraphicOptionsRequest) (*GetGraphicOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGraphicOptions not implemented")
}
func (UnimplementedWebApiServer) CreateMacro(context.Context, *CreateMacroRequest) (*CreateMacroResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMacro not implemented")
}
func (UnimplementedWebApiServer) GetMacro(context.Context, *GetMacroRequest) (*GetMacroResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMacro not implemented")
}
func (UnimplementedWebApiServer) ListMacro(context.Context, *ListMacroRequest) (*ListMacroResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMacro not implemented")
}
func (UnimplementedWebApiServer) DeleteMacro(context.Context, *DeleteMacroRequest) (*DeleteMacroResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMacro not implemented")
}
func (UnimplementedWebApiServer) mustEmbedUnimplementedWebApiServer() {}
func (UnimplementedWebApiServer) testEmbeddedByValue()                {}

// UnsafeWebApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebApiServer will
// result in compilation errors.
type UnsafeWebApiServer interface {
	mustEmbedUnimplementedWebApiServer()
}

func RegisterWebApiServer(s grpc.ServiceRegistrar, srv WebApiServer) {
	// If the following call pancis, it indicates UnimplementedWebApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WebApi_ServiceDesc, srv)
}

func _WebApi_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebApi_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebApi_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_ListMyRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).ListMyRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebApi_ListMyRooms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).ListMyRooms(ctx, req.(*ListRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_ListAllRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).ListAllRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebApi_ListAllRooms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).ListAllRooms(ctx, req.(*ListRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebApi_CreateRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).CreateRoom(ctx, req.(*CreateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_GetRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).GetRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebApi_GetRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).GetRoom(ctx, req.(*GetRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebApi_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_OpenGameConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenGameConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).OpenGameConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebApi_OpenGameConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).OpenGameConnection(ctx, req.(*OpenGameConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_SDPAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SDPAnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).SDPAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebApi_SDPAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).SDPAnswer(ctx, req.(*SDPAnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_AddICECandidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddICECandidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).AddICECandidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebApi_AddICECandidate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).AddICECandidate(ctx, req.(*AddICECandidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_ListMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).ListMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebApi_ListMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).ListMembers(ctx, req.(*ListMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_JoinRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).JoinRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebApi_JoinRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).JoinRoom(ctx, req.(*JoinRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_DeleteRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).DeleteRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebApi_DeleteRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).DeleteRoom(ctx, req.(*DeleteRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_UpdateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).UpdateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebApi_UpdateRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).UpdateRoom(ctx, req.(*UpdateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_GetRoomMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).GetRoomMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebApi_GetRoomMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).GetRoomMember(ctx, req.(*GetRoomMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_ListGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).ListGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebApi_ListGames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).ListGames(ctx, req.(*ListGamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_SetController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetControllerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).SetController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebApi_SetController_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).SetController(ctx, req.(*SetControllerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_UpdateMemberRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).UpdateMemberRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebApi_UpdateMemberRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).UpdateMemberRole(ctx, req.(*UpdateMemberRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_DeleteMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).DeleteMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebApi_DeleteMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).DeleteMember(ctx, req.(*DeleteMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_SaveGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).SaveGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebApi_SaveGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).SaveGame(ctx, req.(*SaveGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_LoadSave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).LoadSave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebApi_LoadSave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).LoadSave(ctx, req.(*LoadSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_ListSaves_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSavesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).ListSaves(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebApi_ListSaves_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).ListSaves(ctx, req.(*ListSavesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_RestartEmulator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartEmulatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).RestartEmulator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebApi_RestartEmulator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).RestartEmulator(ctx, req.(*RestartEmulatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_DeleteSave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).DeleteSave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebApi_DeleteSave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).DeleteSave(ctx, req.(*DeleteSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_CreateUserKeyboardBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserKeyboardBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).CreateUserKeyboardBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebApi_CreateUserKeyboardBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).CreateUserKeyboardBinding(ctx, req.(*CreateUserKeyboardBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_ListUserKeyboardBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserKeyboardBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).ListUserKeyboardBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebApi_ListUserKeyboardBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).ListUserKeyboardBinding(ctx, req.(*ListUserKeyboardBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_GetUserKeyboardBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserKeyboardBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).GetUserKeyboardBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebApi_GetUserKeyboardBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).GetUserKeyboardBinding(ctx, req.(*GetUserKeyboardBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_UpdateUserKeyboardBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserKeyboardBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).UpdateUserKeyboardBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebApi_UpdateUserKeyboardBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).UpdateUserKeyboardBinding(ctx, req.(*UpdateUserKeyboardBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_DeleteUserKeyboardBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserKeyboardBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).DeleteUserKeyboardBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebApi_DeleteUserKeyboardBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).DeleteUserKeyboardBinding(ctx, req.(*DeleteUserKeyboardBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_GetServerICECandidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerICECandidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).GetServerICECandidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebApi_GetServerICECandidate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).GetServerICECandidate(ctx, req.(*GetServerICECandidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_SetGraphicOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGraphicOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).SetGraphicOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebApi_SetGraphicOptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).SetGraphicOptions(ctx, req.(*SetGraphicOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_GetGraphicOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGraphicOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).GetGraphicOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebApi_GetGraphicOptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).GetGraphicOptions(ctx, req.(*GetGraphicOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_CreateMacro_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMacroRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).CreateMacro(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebApi_CreateMacro_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).CreateMacro(ctx, req.(*CreateMacroRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_GetMacro_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMacroRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).GetMacro(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebApi_GetMacro_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).GetMacro(ctx, req.(*GetMacroRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_ListMacro_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMacroRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).ListMacro(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebApi_ListMacro_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).ListMacro(ctx, req.(*ListMacroRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_DeleteMacro_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMacroRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).DeleteMacro(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebApi_DeleteMacro_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).DeleteMacro(ctx, req.(*DeleteMacroRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WebApi_ServiceDesc is the grpc.ServiceDesc for WebApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nesgo.webapi.v1.WebApi",
	HandlerType: (*WebApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _WebApi_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _WebApi_Login_Handler,
		},
		{
			MethodName: "ListMyRooms",
			Handler:    _WebApi_ListMyRooms_Handler,
		},
		{
			MethodName: "ListAllRooms",
			Handler:    _WebApi_ListAllRooms_Handler,
		},
		{
			MethodName: "CreateRoom",
			Handler:    _WebApi_CreateRoom_Handler,
		},
		{
			MethodName: "GetRoom",
			Handler:    _WebApi_GetRoom_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _WebApi_GetUser_Handler,
		},
		{
			MethodName: "OpenGameConnection",
			Handler:    _WebApi_OpenGameConnection_Handler,
		},
		{
			MethodName: "SDPAnswer",
			Handler:    _WebApi_SDPAnswer_Handler,
		},
		{
			MethodName: "AddICECandidate",
			Handler:    _WebApi_AddICECandidate_Handler,
		},
		{
			MethodName: "ListMembers",
			Handler:    _WebApi_ListMembers_Handler,
		},
		{
			MethodName: "JoinRoom",
			Handler:    _WebApi_JoinRoom_Handler,
		},
		{
			MethodName: "DeleteRoom",
			Handler:    _WebApi_DeleteRoom_Handler,
		},
		{
			MethodName: "UpdateRoom",
			Handler:    _WebApi_UpdateRoom_Handler,
		},
		{
			MethodName: "GetRoomMember",
			Handler:    _WebApi_GetRoomMember_Handler,
		},
		{
			MethodName: "ListGames",
			Handler:    _WebApi_ListGames_Handler,
		},
		{
			MethodName: "SetController",
			Handler:    _WebApi_SetController_Handler,
		},
		{
			MethodName: "UpdateMemberRole",
			Handler:    _WebApi_UpdateMemberRole_Handler,
		},
		{
			MethodName: "DeleteMember",
			Handler:    _WebApi_DeleteMember_Handler,
		},
		{
			MethodName: "SaveGame",
			Handler:    _WebApi_SaveGame_Handler,
		},
		{
			MethodName: "LoadSave",
			Handler:    _WebApi_LoadSave_Handler,
		},
		{
			MethodName: "ListSaves",
			Handler:    _WebApi_ListSaves_Handler,
		},
		{
			MethodName: "RestartEmulator",
			Handler:    _WebApi_RestartEmulator_Handler,
		},
		{
			MethodName: "DeleteSave",
			Handler:    _WebApi_DeleteSave_Handler,
		},
		{
			MethodName: "CreateUserKeyboardBinding",
			Handler:    _WebApi_CreateUserKeyboardBinding_Handler,
		},
		{
			MethodName: "ListUserKeyboardBinding",
			Handler:    _WebApi_ListUserKeyboardBinding_Handler,
		},
		{
			MethodName: "GetUserKeyboardBinding",
			Handler:    _WebApi_GetUserKeyboardBinding_Handler,
		},
		{
			MethodName: "UpdateUserKeyboardBinding",
			Handler:    _WebApi_UpdateUserKeyboardBinding_Handler,
		},
		{
			MethodName: "DeleteUserKeyboardBinding",
			Handler:    _WebApi_DeleteUserKeyboardBinding_Handler,
		},
		{
			MethodName: "GetServerICECandidate",
			Handler:    _WebApi_GetServerICECandidate_Handler,
		},
		{
			MethodName: "SetGraphicOptions",
			Handler:    _WebApi_SetGraphicOptions_Handler,
		},
		{
			MethodName: "GetGraphicOptions",
			Handler:    _WebApi_GetGraphicOptions_Handler,
		},
		{
			MethodName: "CreateMacro",
			Handler:    _WebApi_CreateMacro_Handler,
		},
		{
			MethodName: "GetMacro",
			Handler:    _WebApi_GetMacro_Handler,
		},
		{
			MethodName: "ListMacro",
			Handler:    _WebApi_ListMacro_Handler,
		},
		{
			MethodName: "DeleteMacro",
			Handler:    _WebApi_DeleteMacro_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/webapi/v1/nesgo.proto",
}
