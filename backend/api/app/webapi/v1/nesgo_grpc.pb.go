// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: app/webapi/v1/nesgo.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WebApi_Register_FullMethodName           = "/nesgo.webapi.v1.WebApi/Register"
	WebApi_Login_FullMethodName              = "/nesgo.webapi.v1.WebApi/Login"
	WebApi_ListMyRooms_FullMethodName        = "/nesgo.webapi.v1.WebApi/ListMyRooms"
	WebApi_GetUser_FullMethodName            = "/nesgo.webapi.v1.WebApi/GetUser"
	WebApi_GetRoomSession_FullMethodName     = "/nesgo.webapi.v1.WebApi/GetRoomSession"
	WebApi_OpenGameConnection_FullMethodName = "/nesgo.webapi.v1.WebApi/OpenGameConnection"
	WebApi_SDPAnswer_FullMethodName          = "/nesgo.webapi.v1.WebApi/SDPAnswer"
	WebApi_AddICECandidate_FullMethodName    = "/nesgo.webapi.v1.WebApi/AddICECandidate"
)

// WebApiClient is the client API for WebApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebApiClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	ListMyRooms(ctx context.Context, in *ListMyRoomsRequest, opts ...grpc.CallOption) (*ListMyRoomResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	GetRoomSession(ctx context.Context, in *GetRoomSessionRequest, opts ...grpc.CallOption) (*GetRoomSessionResponse, error)
	OpenGameConnection(ctx context.Context, in *OpenGameConnectionRequest, opts ...grpc.CallOption) (*OpenGameConnectionResponse, error)
	SDPAnswer(ctx context.Context, in *SDPAnswerRequest, opts ...grpc.CallOption) (*SDPAnswerResponse, error)
	AddICECandidate(ctx context.Context, in *AddICECandidateRequest, opts ...grpc.CallOption) (*AddICECandidateResponse, error)
}

type webApiClient struct {
	cc grpc.ClientConnInterface
}

func NewWebApiClient(cc grpc.ClientConnInterface) WebApiClient {
	return &webApiClient{cc}
}

func (c *webApiClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, WebApi_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, WebApi_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) ListMyRooms(ctx context.Context, in *ListMyRoomsRequest, opts ...grpc.CallOption) (*ListMyRoomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMyRoomResponse)
	err := c.cc.Invoke(ctx, WebApi_ListMyRooms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, WebApi_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) GetRoomSession(ctx context.Context, in *GetRoomSessionRequest, opts ...grpc.CallOption) (*GetRoomSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRoomSessionResponse)
	err := c.cc.Invoke(ctx, WebApi_GetRoomSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) OpenGameConnection(ctx context.Context, in *OpenGameConnectionRequest, opts ...grpc.CallOption) (*OpenGameConnectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OpenGameConnectionResponse)
	err := c.cc.Invoke(ctx, WebApi_OpenGameConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) SDPAnswer(ctx context.Context, in *SDPAnswerRequest, opts ...grpc.CallOption) (*SDPAnswerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SDPAnswerResponse)
	err := c.cc.Invoke(ctx, WebApi_SDPAnswer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) AddICECandidate(ctx context.Context, in *AddICECandidateRequest, opts ...grpc.CallOption) (*AddICECandidateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddICECandidateResponse)
	err := c.cc.Invoke(ctx, WebApi_AddICECandidate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebApiServer is the server API for WebApi service.
// All implementations must embed UnimplementedWebApiServer
// for forward compatibility.
type WebApiServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	ListMyRooms(context.Context, *ListMyRoomsRequest) (*ListMyRoomResponse, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	GetRoomSession(context.Context, *GetRoomSessionRequest) (*GetRoomSessionResponse, error)
	OpenGameConnection(context.Context, *OpenGameConnectionRequest) (*OpenGameConnectionResponse, error)
	SDPAnswer(context.Context, *SDPAnswerRequest) (*SDPAnswerResponse, error)
	AddICECandidate(context.Context, *AddICECandidateRequest) (*AddICECandidateResponse, error)
	mustEmbedUnimplementedWebApiServer()
}

// UnimplementedWebApiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWebApiServer struct{}

func (UnimplementedWebApiServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedWebApiServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedWebApiServer) ListMyRooms(context.Context, *ListMyRoomsRequest) (*ListMyRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMyRooms not implemented")
}
func (UnimplementedWebApiServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedWebApiServer) GetRoomSession(context.Context, *GetRoomSessionRequest) (*GetRoomSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoomSession not implemented")
}
func (UnimplementedWebApiServer) OpenGameConnection(context.Context, *OpenGameConnectionRequest) (*OpenGameConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenGameConnection not implemented")
}
func (UnimplementedWebApiServer) SDPAnswer(context.Context, *SDPAnswerRequest) (*SDPAnswerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SDPAnswer not implemented")
}
func (UnimplementedWebApiServer) AddICECandidate(context.Context, *AddICECandidateRequest) (*AddICECandidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddICECandidate not implemented")
}
func (UnimplementedWebApiServer) mustEmbedUnimplementedWebApiServer() {}
func (UnimplementedWebApiServer) testEmbeddedByValue()                {}

// UnsafeWebApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebApiServer will
// result in compilation errors.
type UnsafeWebApiServer interface {
	mustEmbedUnimplementedWebApiServer()
}

func RegisterWebApiServer(s grpc.ServiceRegistrar, srv WebApiServer) {
	// If the following call pancis, it indicates UnimplementedWebApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WebApi_ServiceDesc, srv)
}

func _WebApi_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebApi_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebApi_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_ListMyRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMyRoomsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).ListMyRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebApi_ListMyRooms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).ListMyRooms(ctx, req.(*ListMyRoomsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebApi_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_GetRoomSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).GetRoomSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebApi_GetRoomSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).GetRoomSession(ctx, req.(*GetRoomSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_OpenGameConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenGameConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).OpenGameConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebApi_OpenGameConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).OpenGameConnection(ctx, req.(*OpenGameConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_SDPAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SDPAnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).SDPAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebApi_SDPAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).SDPAnswer(ctx, req.(*SDPAnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_AddICECandidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddICECandidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).AddICECandidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebApi_AddICECandidate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).AddICECandidate(ctx, req.(*AddICECandidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WebApi_ServiceDesc is the grpc.ServiceDesc for WebApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nesgo.webapi.v1.WebApi",
	HandlerType: (*WebApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _WebApi_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _WebApi_Login_Handler,
		},
		{
			MethodName: "ListMyRooms",
			Handler:    _WebApi_ListMyRooms_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _WebApi_GetUser_Handler,
		},
		{
			MethodName: "GetRoomSession",
			Handler:    _WebApi_GetRoomSession_Handler,
		},
		{
			MethodName: "OpenGameConnection",
			Handler:    _WebApi_OpenGameConnection_Handler,
		},
		{
			MethodName: "SDPAnswer",
			Handler:    _WebApi_SDPAnswer_Handler,
		},
		{
			MethodName: "AddICECandidate",
			Handler:    _WebApi_AddICECandidate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/webapi/v1/nesgo.proto",
}
