package ppu

type Color struct {
	R uint8
	G uint8
	B uint8
}

var colorMap []Color = []Color{
	{0x0, 0x0, 0x0},
	{0xff, 0xff, 0xff},
	{0x80, 0x80, 0x80},
	{0xff, 0x0, 0x0},
	{0x0, 0xff, 0x0},
	{0x0, 0x0, 0xff},
	{0xff, 0xff, 0x0},
	{0xff, 0x0, 0xff},
	{0x0, 0xff, 0xff},

	{0x80, 0x80, 0x80},
	{0xff, 0x0, 0x0},
	{0x0, 0xff, 0x0},
	{0x0, 0x0, 0xff},
	{0xff, 0xff, 0x0},
	{0xff, 0x0, 0xff},
	{0x0, 0xff, 0xff},
}

// getRGBAColor 将一个内存cell的值转换成RGBA颜色
func getRGBAColor(cell byte) Color {
	if cell < 16 {
		return colorMap[cell]
	}
	return colorMap[0]
}

func (c Color) Uint32() uint32 {
	return uint32(c.R)<<16 | uint32(c.G)<<8 | uint32(c.B)
}
